So for setting up your website on your own domain can be a tedious task if you don't know how to do it correctly!!

Don't worry i am here to help you with that , just read this blog to the end :)

So first of all you would need a domain to run your web app on , you can buy your domain from any online domain providers!

We would be using AWS Machine and Apache server to host our web app ,Now if you google the way to setup your server and host website on that it will some result like this :

```
To host your website on your own AWS server and domain, you can follow the steps below:

Set up an EC2 instance on AWS:
Launch an EC2 instance on AWS with the operating system of your choice (Ubuntu, Windows, etc.)
Ensure that the instance has the necessary resources (CPU, memory, storage, etc.) to run your Node.js application.
Connect to your EC2 instance via SSH and install Node.js and NPM on it.
Install Express using NPM.

Configure your web server:
Set up a reverse proxy server like Nginx or Apache to handle requests to your website.
Configure the reverse proxy to forward requests to your Node.js application running on a specific port.

Configure your DNS settings:
Log in to your domain registrar or DNS provider and configure the DNS settings for your domain to point to the IP address of your AWS EC2 instance.

Deploy your Node.js application:
Deploy your Node.js application to your AWS EC2 instance.
Start your Node.js application and ensure that it is running on the specified port.

Test your website:
Navigate to your domain in a web browser to verify that your website is up and running.
That's it! With these steps, you should be able to host your website on your own AWS server and domain.
```

Now i am sure most of you guys can't just understand all of this at first as you haven't done it before or forgot how to do it that's why you are here!
So lemme help you guys to explain it in details.

First of all i will tell how to setup everything and then will give required code blocks to make your application working!
if you already have the required setup you can skip this part.

Pre Requirements :

You guys would gonna need an AWS Machine , Your own domain and Apacher server , we gonna be using these services for this blog you guys can use otehr's also depends on you!

Setting Up AWS Machine :

For creating account on Amazon AWS go here{https://aws.amazon.com/} and create your account for free , you would have to pay a little fee for verifying your account but it's very less and other things are litterly free.
After creating your account login to your account and go to home , it would look like this :
first.jpg

After logging in search for EC2 in the search bar and click on first EC2 option that come up like this :
second.jpg

After clicking on EC2 it will open your EC2 dashboard , i have already one instance running but you will have 0 if you haven't created any instance before.
third.jpg

Now click on the launch instance option in the above image and it will show you all the details you have to fill for creating your instance , fill out according to your need!!
fourth.jpg

i would suggest go with these :
Name : My Server
Machine : Ubuntu ( select only free tier eligible )
key pair : for key pair craete new and name it accordingly and keep it secret and safe.
		key pair type : RSA , Private key file format : .pem
Configure storage : select these according to your needs

keep other's default and launch instance , it will take some time and your instance will start working!

Now go to your instances and it will show your instance like this :
fifth.jpg

Now open your instance by clicking on instance id, save your instance public ip address and then click on connect button :
sixth.jpg

It will open a connect to instance window and will show you all the options how you can connect with your instance , we will use ssh method so go to *SSH client* tab and copy the Example string it should look like this : ```ssh -i "private-key-filename.pem" ubuntu@ec2-13-235-16-240.ap-south-1.compute.amazonaws.com```
see below image for reference :
eigth.jpg

That's all from this , you guys have to keep three things safe from above
first that private key file , second your instance public ip address and third that Example string.

Setting Up your Own Domain : 

You guys can buy your domain name from any provider i have purchased mine from GoDaddy you guys can also other websites also there are many.
We will be using Cloudflare for managing our domain DNS Settings so after getting your domain go here{https://dash.cloudflare.com/} and login or create account if you don't have one, your dashboard should look like this :
ninth.jpg

Click on ADD SITE button from above image and enter root domain of your website and select free plan, it will take couple minutes and would show something like this :
tenth.jpg

click on add record and add required A types like @ and www and use that public ip address we got from AWS Server to input in the IPv4 address and save.
eleventh.jpg

Okay that's all for this part.

Setting Up Apache Server : we would set up apache server while hosting our website using that AWS Machine so let's dive into that without any delay.

Final Hosting :

This is the final and most important part of this blog for this you would gonna need an access to a SSH Terminal or you can use your Laptop or Pc terminal also.

Follow these simple steps :
Step 1:
Open your terminal in the folder you saved your private key file and run the example string you copied from AWS Server.
twelveth.jpg

Step 2:
Clone your github project using
<code>git clone your-repo-link</code>

Step 3:
Go to your project folder using
<code>cd your-project-folder</code>

Step 4:
Now if you have used any node packages you would need to install them using npm , so first make sure your npm version is compatible with the required NodeJs version and then use this command to install NodeJs packages
<code>npm install</code>

Step 5:
Now use this command to start a new tmux session so that we can run our main js file there
<code>tmux new -s myapp</code>

Step 6:
Now you are in tmux window , now use this command to run your node app:
<code>node app.js</code>
It will start your app on the given port so make sure you remember that port as we would gonna need that.

Step 7:
Now we guys would need an Apache server so use this command: 
<code>sudo apt-get install apache2</code>


Step 8:
You can create virtual hosts to serve multiple websites on the same server. You will need to create a configuration file for each virtual host in the ```/etc/apache2/sites-available/``` directory. For example, if you want to create a virtual host for example.com, you can create a file called ```/etc/apache2/sites-available/example.com.conf``` with the following contents:
<code>cd /etc/apache2/sites-available/</code>
<code>sudo nano example.com.conf</code>

Step 8-1:
Now enter the below content in your example.com.conf file 

if you guys have Node app running using some local host port use this:
<code>
<VirtualHost *:80>
  ServerName example.com
  ProxyPass / http://localhost:5000/
  ProxyPassReverse / http://localhost:5000/
  ErrorLog ${APACHE_LOG_DIR}/error.log
  CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
</code>

if you guys have just simple html and js files use this instead:
<code>
<VirtualHost *:80>
    ServerName example.com
    DocumentRoot /var/www/example.com
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
</code>

Now save changes and exit nano editor using CTRL + 'O' to save and Enter after that exit using CTRL + 'X'
To exit nano without saving use CTRL + 'X'
After doing this you guys can remove that `000-default.conf` file (present in this same folder) it depend on you guys.
Step 9:
You guys need to follow this step only if you have normal app using just html and css file and not using some port

Step 9-1:
Create folder so that you can save your app code there 
<code>sudo mkdir /var/www/example.com</code>
<code>cd /var/www/example.com</code>

Step 9-2:
Now clone your github repo here instead:
<code>git clone your-repo-link</>
make sure index file is present in example.com folder directly

Step 10:
You will need to enable the virtual host by creating a symbolic link from the configuration file in the ```/etc/apache2/sites-available/``` directory to the ```/etc/apache2/sites-enabled/``` directory. You can do this by running the following command:
<code>sudo a2ensite example.com.conf</code>

Step 11:
You will need to allow HTTP traffic through the firewall. You can do this by running the following command:
<code>sudo ufw allow http</code>
Step 11-1:
Check if the required module for ProxyPass is enabled. You can do this by running the following command
<code>sudo a2enmod proxy</code>
Step 11-2:
Also enable this module:
<code>sudo a2enmod proxy_http</code>

Step 12:
You will need to restart Apache for the changes to take effect. You can do this by running the following command:
<code>sudo systemctl restart apache2</code>

Step 13:
Check the status of your server using this command:
<code>systemctl status apache2.service</code>

That's all for this blog, thanks for enjoying my content!!


Extra : how to install latest node in ubuntu ( https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html )